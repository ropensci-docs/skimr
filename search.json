[{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Contributions skimr whether form bug fixes, issue reports, new code documentation improvement welcome. Please use github issue tracker. pull request please link open corresponding issue issue tracker. Please ensure notifications turned respond questions, comments needed changes promptly.","code":""},{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":"understanding-the-scope-of-skimr","dir":"","previous_headings":"","what":"Understanding the scope of skimr","title":"Contributing","text":"skimr solves specific set problems focused compact, flexible useful display summary data console. intended replacement packages create publication ready tables. basic concept “skimming” data frame tibble get overview data contains. One intended group users students first semester statistics class. , package focused data types widely used. One general guideline data type found datasets package directly supported skimr. Fortunately, skim() generic internal function handling variety data types get_skimmers(). See documentation function vignette “Supporting additional objects” documentation . Similarly, skimr deeply tied tidyverse dplyr particular. comes lot benefits, constraints . importantly, data processed skim() needs object inherits data frame form can coerced data frame.","code":""},{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"","what":"Tests","title":"Contributing","text":"skimr uses testthat testing. Please try provide 100% test coverage submitted code always check existing tests continue pass. beginner need help writing test, mention issue try help.","code":""},{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull requests","title":"Contributing","text":"Pull requests develop branch main branch. can set creating pull request. Please make separately named branch submit. Keep branch complete specific issue. create pull request editing GitHub web editor end multiple pull requests, note issue comments.","code":""},{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing","text":"follow tidyverse style guide.","code":""},{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":"pre-commits","dir":"","previous_headings":"","what":"Pre commits","title":"Contributing","text":"enforce coding style support development, rely [pre-commit.com], R precommit package. tool runs series additional checks code git commit completes. install package enable precommits, run following: checks run automatically .","code":"# once on your system remotes::install_github(\"lorenzwalthert/precommit\") precommit::install_precommit()  # once in every git repo either # * after cloning a repo that already uses pre-commit or # * if you want introduce pre-commit to this repo precommit::use_precommit()"},{"path":"https://docs.ropensci.org/skimr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"contributing skimr must follow code conduct defined rOpenSci.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/Skimr_defaults.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Skimr defaults","text":"vignette simply displays default data types summary functions skimr. Customizing skimr explained Using Skimr vignette.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/Skimr_defaults.html","id":"the-base-skimmers","dir":"Articles","previous_headings":"","what":"The base skimmers","title":"Skimr defaults","text":"skimr group functions applies data types. call “base”” skimmers: n_missing: number missing values column. complete_rate: ratio non-missing values total values column.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/Skimr_defaults.html","id":"default-skimmers","dir":"Articles","previous_headings":"","what":"Default skimmers","title":"Skimr defaults","text":"learn functions used package, use function get_default_skimmer_names(). counterpart function get_default_skimmers(), returns functions . interested particular class within skimr, pass string either function. information stored skimmers_used attribute object returned skim().","code":"library(skimr) get_default_skimmer_names() ## $AsIs ## [1] \"n_unique\"   \"min_length\" \"max_length\" ##  ## $character ## [1] \"min\"        \"max\"        \"empty\"      \"n_unique\"   \"whitespace\" ##  ## $complex ## [1] \"mean\" ##  ## $Date ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $difftime ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $factor ## [1] \"ordered\"    \"n_unique\"   \"top_counts\" ##  ## $haven_labelled ## [1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\" ##  ## $list ## [1] \"n_unique\"   \"min_length\" \"max_length\" ##  ## $logical ## [1] \"mean\"  \"count\" ##  ## $numeric ## [1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\" ##  ## $POSIXct ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $Timespan ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $ts ##  [1] \"start\"      \"end\"        \"frequency\"  \"deltat\"     \"mean\"       ##  [6] \"sd\"         \"min\"        \"max\"        \"median\"     \"line_graph\" get_default_skimmer_names(\"numeric\") ## $numeric ## [1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\""},{"path":"https://docs.ropensci.org/skimr/articles/extending_skimr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Extending skimr","text":"skim() function summarizes data types contained within data frames objects .data.frame() methods coerce data frames. comes set default summary functions wide variety data types, comprehensive. Package authors (advanced users) can add support skimming specific non-data-frame objects packages, can provide different defaults summary functions. require including skimr dependency.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/extending_skimr.html","id":"skimming-objects-that-are-not-coercible-to-data-frames","dir":"Articles","previous_headings":"","what":"Skimming objects that are not coercible to data frames","title":"Extending skimr","text":"example illustrate creating support lm object produced lm(). object involves two required elements one optional element. simple example, types objects may much complexity adding skim support package also need add skimr list imports. lm() function produces complex object class “lm”. .data.frame method lm object. Unlike example new type data column simple data frame (create sfl) frame “Using skimr” vignette, different type challenge: object might wish skim, directly skimmed. Therefore need make object either data frame coercible data frame. case lm object, model attribute already data frame. simple way solve challenge skim results$model directly. Data summary Variable type: factor Variable type: numeric works, go one step create new function directly. Data summary Variable type: factor Variable type: numeric desired, complex function can created. example, lm object also contains fitted values residuals. incorporate data frame. Data summary Variable type: factor Variable type: numeric second example need special function dist objects. UScitiesD data set example . dist object often, case, lower triange matrices distances, can measured various ways. many packages produce dist objects /take dist objects inputs, including cluster analysis multidimensional scaling. simple solution follow similar design lm objects. However, limitation treating dist data though simple numeric data. might want , instead, create new class, example, “distance” specifically distance data. allow sfl skimr function list. handling gets complex, rather make new function can powerful define .data.frame S3 method dist objects, allow integrate skimr completely uses use skim() function directly. package want export . However, sfl created, skimr recognize class fall back treating data character data. Data summary Variable type: character solution define sfl (skimr function list) specifically distance class.","code":"library(skimr) results <- lm(weight ~ feed, data = chickwts) class(results) ## [1] \"lm\" attributes(results) ## $names ##  [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"          ##  [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"   ##  [9] \"contrasts\"     \"xlevels\"       \"call\"          \"terms\"         ## [13] \"model\"         ##  ## $class ## [1] \"lm\" as.data.frame(results) #> Error in as.data.frame.default(results) : #>  cannot coerce class ‘\"lm\"’ to a data.frame skim(results$model) skim_lm <- function(.data) {   .data <- .data$model   skimr::skim(.data) }  lm(weight ~ feed, data = chickwts) %>% skim_lm() skim_lm <- function(.data, fit = FALSE) {   .data <- .data$model   if (fit) {     .data <- .data %>%       dplyr::bind_cols(         fitted = data.frame(results$fitted.values),         residuals = data.frame(results$residuals)       )   }   skimr::skim(.data) } skim_lm(results, fit = TRUE) class(UScitiesD) ## [1] \"dist\" UScitiesD ##               Atlanta Chicago Denver Houston LosAngeles Miami NewYork ## Chicago           587                                                 ## Denver           1212     920                                         ## Houston           701     940    879                                  ## LosAngeles       1936    1745    831    1374                          ## Miami             604    1188   1726     968       2339               ## NewYork           748     713   1631    1420       2451  1092         ## SanFrancisco     2139    1858    949    1645        347  2594    2571 ## Seattle          2182    1737   1021    1891        959  2734    2408 ## Washington.DC     543     597   1494    1220       2300   923     205 ##               SanFrancisco Seattle ## Chicago                            ## Denver                             ## Houston                            ## LosAngeles                         ## Miami                              ## NewYork                            ## SanFrancisco                       ## Seattle                678         ## Washington.DC         2442    2329 skim_dist <- function(.data) {   .data <- data.frame(as.matrix(.data))   skimr::skim(.data) } as.data.frame.dist <- function(.data) {   .data <- data.frame(as.matrix(.data))    .data[] <- lapply(.data, structure, class = \"distance\", nms = names(.data))   .data }  as.data.frame(UScitiesD) ##               Atlanta Chicago Denver Houston LosAngeles Miami NewYork ## Atlanta             0     587   1212     701       1936   604     748 ## Chicago           587       0    920     940       1745  1188     713 ## Denver           1212     920      0     879        831  1726    1631 ## Houston           701     940    879       0       1374   968    1420 ## LosAngeles       1936    1745    831    1374          0  2339    2451 ## Miami             604    1188   1726     968       2339     0    1092 ## NewYork           748     713   1631    1420       2451  1092       0 ## SanFrancisco     2139    1858    949    1645        347  2594    2571 ## Seattle          2182    1737   1021    1891        959  2734    2408 ## Washington.DC     543     597   1494    1220       2300   923     205 ##               SanFrancisco Seattle Washington.DC ## Atlanta               2139    2182           543 ## Chicago               1858    1737           597 ## Denver                 949    1021          1494 ## Houston               1645    1891          1220 ## LosAngeles             347     959          2300 ## Miami                 2594    2734           923 ## NewYork               2571    2408           205 ## SanFrancisco             0     678          2442 ## Seattle                678       0          2329 ## Washington.DC         2442    2329             0 skim(UScitiesD) ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`.  ## Warning: Couldn't find skimmers for class: distance; No user-defined `sfl` ## provided. Falling back to `character`."},{"path":"https://docs.ropensci.org/skimr/articles/extending_skimr.html","id":"defining-sfls-for-a-package","dir":"Articles","previous_headings":"Skimming objects that are not coercible to data frames","what":"Defining sfl’s for a package","title":"Extending skimr","text":"skimr opinionated list functions class (e.g. numeric, factor) data. core package supports many commonly used classes, many others. can investigate defaults calling get_default_skimmer_names(). data type, like distance, isn’t covered defaults? skimr usually falls back treating type character, isn’t necessarily helpful. case, ’re best adding data type skim_with(). begin, ’ll using following custom summary statistics throughout. functions find nearest furthest location location. One thing important aware creating statistics functions skimr skimr largely uses tibbles rather base data frames. means many base operations work expected. function, like summary functions used skimr two notable features. accepts vector single argument returns scalar, R terminology, vector length 1. lot functions fulfill criteria: Existing functions base, stats, packages, lambda’s created using Tidyverse-style syntax custom functions defined skimr package custom functions defined. fulfilling two criteria can lead confusing behavior within skimr. Beware! example issue base quantile() function default skimr percentiles returned using quantile() five times. case functions, ties result returning vectors length greater 1. handled collapsing tied values single string. Notice, also, case distance data may wish exclude distances 0, indicate distance place . finding minimum function looks distance places. least two ways might want customize skimr handling special data type within package work. first create custom skimming function. Data summary Variable type: distance example creates new function, can call function specific column distance data get appropriate summary statistics. skim_with factory also uses default skimrs things like factors, characters, numerics. Therefore skim_with_dist like regular skim function added ability summarize distance columns. works data type can also include within package (assuming users load skimr), second, even better, approach. take full advantage skimr, ’ll dig bit API.","code":"get_nearest <- function(column) {   closest <- which.min(column[column != 0])   cities <- attr(column, \"nms\")[column != 0]   toString(cities[closest]) }  get_furthest <- function(column) {   furthest <- which.max(column[column != 0])   cities <- attr(column, \"nms\")[column != 0]   toString(cities[furthest]) } skim_with_dist <- skim_with(   distance = sfl(     nearest = get_nearest,     furthest = get_furthest   ) ) ## Creating new skimming functions for the following classes: distance. ## They did not have recognized defaults. Call get_default_skimmers() for more information. skim_with_dist(UScitiesD)"},{"path":"https://docs.ropensci.org/skimr/articles/extending_skimr.html","id":"adding-new-methods","dir":"Articles","previous_headings":"Skimming objects that are not coercible to data frames","what":"Adding new methods","title":"Extending skimr","text":"skimr lookup mechanism, based function get_skimmers(), find default summary functions class. based S3 class system. can learn Advanced R. requires add skimr list dependencies. export new set defaults data type, create method generic function get_skimmers. methods returns sfl (skimr function list) list-like data structure used skim_with() example . note! one key difference. adding generic also want identify skim_type sfl. probably want use skimr::get_skimmers.distance() work vignette. package want export . strategy follows data types. Create method return sfl make sure skim_type included. Users package load skimr get skim() function (although import reexport ). loaded, call get_default_skimmer_names() return defaults data types well! able use skim() directly. Data summary Variable type: distance","code":"#' @importFrom skimr get_skimmers #' @export get_skimmers.distance <- function(column) {   sfl(     skim_type = \"distance\",     nearest = get_nearest,     furthest = get_furthest   ) } get_default_skimmer_names() ## $AsIs ## [1] \"n_unique\"   \"min_length\" \"max_length\" ##  ## $character ## [1] \"min\"        \"max\"        \"empty\"      \"n_unique\"   \"whitespace\" ##  ## $complex ## [1] \"mean\" ##  ## $Date ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $difftime ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $distance ## [1] \"nearest\"  \"furthest\" ##  ## $factor ## [1] \"ordered\"    \"n_unique\"   \"top_counts\" ##  ## $haven_labelled ## [1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\" ##  ## $list ## [1] \"n_unique\"   \"min_length\" \"max_length\" ##  ## $logical ## [1] \"mean\"  \"count\" ##  ## $numeric ## [1] \"mean\" \"sd\"   \"p0\"   \"p25\"  \"p50\"  \"p75\"  \"p100\" \"hist\" ##  ## $POSIXct ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $Timespan ## [1] \"min\"      \"max\"      \"median\"   \"n_unique\" ##  ## $ts ##  [1] \"start\"      \"end\"        \"frequency\"  \"deltat\"     \"mean\"       ##  [6] \"sd\"         \"min\"        \"max\"        \"median\"     \"line_graph\" skim(UScitiesD)"},{"path":"https://docs.ropensci.org/skimr/articles/extending_skimr.html","id":"conclusion","dir":"Articles","previous_headings":"Skimming objects that are not coercible to data frames","what":"Conclusion","title":"Extending skimr","text":"simple example. packages custom statistics likely much complex. flexibility skimr allows manage . Thanks Jakub Nowosad, Tiernan Martin, Edzer Pebesma, Michael Sumner, Kyle Butts inspiring helping development code.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Skimr","text":"skimr designed provide summary statistics variables data frames, tibbles, data tables vectors. opinionated defaults, easy modify. base R, similar functions summary() vectors data frames fivenum() numeric vectors:","code":"summary(iris) ##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    ##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100   ##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300   ##  Median :5.800   Median :3.000   Median :4.350   Median :1.300   ##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199   ##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800   ##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500   ##        Species   ##  setosa    :50   ##  versicolor:50   ##  virginica :50   ##                  ##                  ## summary(iris$Sepal.Length) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   4.300   5.100   5.800   5.843   6.400   7.900 fivenum(iris$Sepal.Length) ## [1] 4.3 5.1 5.8 6.4 7.9 summary(iris$Species) ##     setosa versicolor  virginica  ##         50         50         50"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"the-skim-function","dir":"Articles","previous_headings":"","what":"The skim() function","title":"Using Skimr","text":"core function skimr skim(), designed work (grouped) data frames, try coerce objects data frames possible. Like summary(), skim()’s method data frames presents results every column; statistics provides depend class variable.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"skimming-data-frames","dir":"Articles","previous_headings":"The skim() function","what":"Skimming data frames","title":"Using Skimr","text":"design, main focus skimr data frames; intended fit well within data pipeline relies extensively tidyverse vocabulary, focuses data frames. Results skim() printed horizontally, one section per variable type one row per variable. format results single wide data frame combining results, additional attributes two metadata columns: skim_variable: name original variable skim_type: class variable Unlike many objects within R, columns intrinsic skim_df class. Dropping variables result coercion tibble. is_skim_df() function used assert object skim_df. order avoid type coercion, columns summary statistics different types prefixed corresponding skim_type. means columns skim_df somewhat sparse, quite missing values. statistics representations different types variables different. example, mean Date variable numeric variable represented differently printing, supported single vector. exception n_missing complete_rate (missing/number observations) types variables. contrast summary.data.frame(), stores statistics table. distinction important, skim_df object pipeable easy use additional manipulation: example, user select variable means, summary statistics specific variable. dplyr verbs work expected. base skimmers n_missing complete_rate computed columns data. type-based skimmers namespace. need use skim_type prefix refer correct column. skim() also supports grouped data created dplyr::group_by(). case, one additional column grouping variable added skim_df object. Individual columns data frame may selected using tidyverse-style selectors. common select helpers. individual column unsupported class, treated character variable warning.","code":"library(skimr) skim(iris) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  4      ## ________________________          ## Group variables            None   ##  ## ── Variable type: factor ─────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate ordered n_unique ## 1 Species               0             1 FALSE          3 ##   top_counts                ## 1 set: 50, ver: 50, vir: 50 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ ## 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ ## 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ ## 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃ skim(iris) %>% is_skim_df() ## [1] TRUE ## attr(,\"message\") ## character(0) skim(iris) %>%   dplyr::select(-skim_type, -skim_variable) %>%   is_skim_df() ## [1] FALSE ## attr(,\"message\") ## [1] \"Object is not a `skim_df`: missing column `skim_type`; missing column `skim_variable`\" skim(iris) %>%   dplyr::select(-n_missing) %>%   is_skim_df() ## [1] TRUE ## attr(,\"message\") ## character(0) skim(iris) %>%   tibble::as_tibble() ## # A tibble: 5 × 15 ##   skim_type skim_variable n_missing complete_rate factor.ordered factor.n_unique ##   <chr>     <chr>             <int>         <dbl> <lgl>                    <int> ## 1 factor    Species               0             1 FALSE                        3 ## 2 numeric   Sepal.Length          0             1 NA                          NA ## 3 numeric   Sepal.Width           0             1 NA                          NA ## 4 numeric   Petal.Length          0             1 NA                          NA ## 5 numeric   Petal.Width           0             1 NA                          NA ## # ℹ 9 more variables: factor.top_counts <chr>, numeric.mean <dbl>, ## #   numeric.sd <dbl>, numeric.p0 <dbl>, numeric.p25 <dbl>, numeric.p50 <dbl>, ## #   numeric.p75 <dbl>, numeric.p100 <dbl>, numeric.hist <chr> skim(iris) %>%   dplyr::filter(skim_variable == \"Petal.Length\") ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   numeric                  1      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean   sd p0 p25  p50 p75 p100 hist  ## 1 Petal.Length          0             1 3.76 1.77  1 1.6 4.35 5.1  6.9 ▇▁▆▇▂ skim(iris) %>%   dplyr::select(skim_type, skim_variable, n_missing) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  4      ## ________________________          ## Group variables            None   ##  ## ── Variable type: factor ─────────────────────────────────────────────────────── ##   skim_variable n_missing ## 1 Species               0 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing ## 1 Sepal.Length          0 ## 2 Sepal.Width           0 ## 3 Petal.Length          0 ## 4 Petal.Width           0 skim(iris) %>%   dplyr::select(skim_type, skim_variable, numeric.mean) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  4      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable mean ## 1 Sepal.Length  5.84 ## 2 Sepal.Width   3.06 ## 3 Petal.Length  3.76 ## 4 Petal.Width   1.20 iris %>%   dplyr::group_by(Species) %>%   skim() ## ── Data Summary ──────────────────────── ##                            Values     ## Name                       Piped data ## Number of rows             150        ## Number of columns          5          ## _______________________               ## Column type frequency:                ##   numeric                  4          ## ________________________              ## Group variables            Species    ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##    skim_variable Species    n_missing complete_rate  mean    sd  p0  p25  p50 ##  1 Sepal.Length  setosa             0             1 5.01  0.352 4.3 4.8  5    ##  2 Sepal.Length  versicolor         0             1 5.94  0.516 4.9 5.6  5.9  ##  3 Sepal.Length  virginica          0             1 6.59  0.636 4.9 6.22 6.5  ##  4 Sepal.Width   setosa             0             1 3.43  0.379 2.3 3.2  3.4  ##  5 Sepal.Width   versicolor         0             1 2.77  0.314 2   2.52 2.8  ##  6 Sepal.Width   virginica          0             1 2.97  0.322 2.2 2.8  3    ##  7 Petal.Length  setosa             0             1 1.46  0.174 1   1.4  1.5  ##  8 Petal.Length  versicolor         0             1 4.26  0.470 3   4    4.35 ##  9 Petal.Length  virginica          0             1 5.55  0.552 4.5 5.1  5.55 ## 10 Petal.Width   setosa             0             1 0.246 0.105 0.1 0.2  0.2  ## 11 Petal.Width   versicolor         0             1 1.33  0.198 1   1.2  1.3  ## 12 Petal.Width   virginica          0             1 2.03  0.275 1.4 1.8  2    ##     p75 p100 hist  ##  1 5.2   5.8 ▃▃▇▅▁ ##  2 6.3   7   ▂▇▆▃▃ ##  3 6.9   7.9 ▁▃▇▃▂ ##  4 3.68  4.4 ▁▃▇▅▂ ##  5 3     3.4 ▁▅▆▇▂ ##  6 3.18  3.8 ▂▆▇▅▁ ##  7 1.58  1.9 ▁▃▇▃▁ ##  8 4.6   5.1 ▂▂▇▇▆ ##  9 5.88  6.9 ▃▇▇▃▂ ## 10 0.3   0.6 ▇▂▂▁▁ ## 11 1.5   1.8 ▅▇▃▆▁ ## 12 2.3   2.5 ▂▇▆▅▇ skim(iris, Sepal.Length, Species) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  1      ## ________________________          ## Group variables            None   ##  ## ── Variable type: factor ─────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate ordered n_unique ## 1 Species               0             1 FALSE          3 ##   top_counts                ## 1 set: 50, ver: 50, vir: 50 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25 p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8 6.4  7.9 ▆▇▇▅▂ skim(iris, starts_with(\"Sepal\")) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   numeric                  2      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25 p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8 6.4  7.9 ▆▇▇▅▂ ## 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3   3.3  4.4 ▁▆▇▂▁"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"skimming-vectors","dir":"Articles","previous_headings":"","what":"Skimming vectors","title":"Using Skimr","text":"skimr v2, skim() attempt coerce non-data frames (vectors matrices) data frames. cases vectors, object evaluated equivalent wrapping object .data.frame(). example, lynx data set class ts. coercing data frame.","code":"skim(lynx) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       lynx   ## Number of rows             114    ## Number of columns          1      ## _______________________           ## Column type frequency:            ##   ts                       1      ## ________________________          ## Group variables            None   ##  ## ── Variable type: ts ─────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate start  end frequency deltat  mean    sd ## 1 x                     0             1  1821 1934         1      1 1538. 1586. ##   min  max median line_graph ## 1  39 6991    771 ⡈⢄⡠⢁⣀⠒⣀⠔ all.equal(skim(lynx), skim(as.data.frame(lynx))) ## [1] \"Attributes: < Component \\\"df_name\\\": 1 string mismatch >\""},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"skimming-matrices","dir":"Articles","previous_headings":"","what":"Skimming matrices","title":"Using Skimr","text":"skimr support skimming matrices directly coerces data frames. Columns matrix become variables. behavior similar summary.matrix()). Three possible ways handle matrices skim() parallel three variations mean function matrices. Skimming matrix produces similar results colMeans(). Skimming transpose matrix give row-wise results. call c() matrix get results across columns.","code":"m <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow = 4, ncol = 3) m ##      [,1] [,2] [,3] ## [1,]    1    5    9 ## [2,]    2    6   10 ## [3,]    3    7   11 ## [4,]    4    8   12 colMeans(m) ## [1]  2.5  6.5 10.5 skim(m) # Similar to summary.matrix and colMeans() ## ── Data Summary ──────────────────────── ##                            Values ## Name                       m      ## Number of rows             4      ## Number of columns          3      ## _______________________           ## Column type frequency:            ##   numeric                  3      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean   sd p0  p25  p50   p75 p100 hist  ## 1 V1                    0             1  2.5 1.29  1 1.75  2.5  3.25    4 ▇▇▁▇▇ ## 2 V2                    0             1  6.5 1.29  5 5.75  6.5  7.25    8 ▇▇▁▇▇ ## 3 V3                    0             1 10.5 1.29  9 9.75 10.5 11.2    12 ▇▇▁▇▇ rowMeans(m) ## [1] 5 6 7 8 skim(t(m)) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       t(m)   ## Number of rows             3      ## Number of columns          4      ## _______________________           ## Column type frequency:            ##   numeric                  4      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist  ## 1 V1                    0             1    5  4  1   3   5   7    9 ▇▁▇▁▇ ## 2 V2                    0             1    6  4  2   4   6   8   10 ▇▁▇▁▇ ## 3 V3                    0             1    7  4  3   5   7   9   11 ▇▁▇▁▇ ## 4 V4                    0             1    8  4  4   6   8  10   12 ▇▁▇▁▇ skim(c(m)) ## ── Data Summary ──────────────────────── ##                            Values ## Name                       c(m)   ## Number of rows             12     ## Number of columns          1      ## _______________________           ## Column type frequency:            ##   numeric                  1      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean   sd p0  p25 p50  p75 p100 hist  ## 1 data                  0             1  6.5 3.61  1 3.75 6.5 9.25   12 ▇▅▅▅▇ mean(m) ## [1] 6.5"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"skimming-without-modification","dir":"Articles","previous_headings":"Skimming matrices","what":"Skimming without modification","title":"Using Skimr","text":"skim_tee() produces printed version skim() returns original, unmodified data frame. allows continued piping original data. Note, skim_tee() customized differently skim . See details.","code":"iris_setosa <- iris %>%   skim_tee() %>%   dplyr::filter(Species == \"setosa\") ## ── Data Summary ──────────────────────── ##                            Values ## Name                       data   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  4      ## ________________________          ## Group variables            None   ##  ## ── Variable type: factor ─────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate ordered n_unique ## 1 Species               0             1 FALSE          3 ##   top_counts                ## 1 set: 50, ver: 50, vir: 50 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ ## 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ ## 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ ## 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃ head(iris_setosa) ##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1          5.1         3.5          1.4         0.2  setosa ## 2          4.9         3.0          1.4         0.2  setosa ## 3          4.7         3.2          1.3         0.2  setosa ## 4          4.6         3.1          1.5         0.2  setosa ## 5          5.0         3.6          1.4         0.2  setosa ## 6          5.4         3.9          1.7         0.4  setosa"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"reshaping-the-results-from-skim","dir":"Articles","previous_headings":"","what":"Reshaping the results from skim()","title":"Using Skimr","text":"noted , skim() returns wide data frame. usually sensible format majority operations investigating data, package functions help edge cases. First, partition() returns named list wide data frames data type. Unlike original data partitioned data columns corresponding skimming functions used data type. data frames , therefore, skim_df objects. Alternatively, yank() selects subtable specific type. Think like dplyr::select column types original data. , unsuitable columns dropped. to_long() returns single long data frame columns variable, type, statistic formatted. similar identical skim_df object skimr v1. Since skim_variable skim_type columns core component skim_df class, ’s possible get unwanted side effects using dplyr::select(). Instead, use focus() select columns skimmed results keep skim_df; always keeps metadata column.","code":"iris %>%   skim() %>%   partition() ## $factor ##  ## ── Variable type: factor ─────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate ordered n_unique top_counts              ## 1 Species               0             1 FALSE          3 set: 50, ver: 50, vir:… ##  ## $numeric ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ ## 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ ## 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ ## 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃ iris %>%   skim() %>%   yank(\"numeric\") ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ ## 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ ## 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ ## 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃ iris %>%   skim() %>%   to_long() %>%   head() ## # A tibble: 6 × 4 ##   skim_type skim_variable stat          formatted ##   <chr>     <chr>         <chr>         <chr>     ## 1 factor    Species       n_missing     0         ## 2 numeric   Sepal.Length  n_missing     0         ## 3 numeric   Sepal.Width   n_missing     0         ## 4 numeric   Petal.Length  n_missing     0         ## 5 numeric   Petal.Width   n_missing     0         ## 6 factor    Species       complete_rate 1 iris %>%   skim() %>%   focus(n_missing, numeric.mean) ## ── Data Summary ──────────────────────── ##                            Values     ## Name                       Piped data ## Number of rows             150        ## Number of columns          5          ## _______________________               ## Column type frequency:                ##   factor                   1          ##   numeric                  4          ## ________________________              ## Group variables            None       ##  ## ── Variable type: factor ─────────────────────────────────────────────────────── ##   skim_variable n_missing ## 1 Species               0 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────── ##   skim_variable n_missing mean ## 1 Sepal.Length          0 5.84 ## 2 Sepal.Width           0 3.06 ## 3 Petal.Length          0 3.76 ## 4 Petal.Width           0 1.20"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"rendering-the-results-of-skim","dir":"Articles","previous_headings":"","what":"Rendering the results of skim()","title":"Using Skimr","text":"skim_df object wide data frame. display created default using print.skim_df(); users can specify additional options explicitly calling print([skim_df object], ...). documents rendered knitr, package provides custom knit_print method. use , final line code chunk skim_df object. Data summary Variable type: factor Variable type: numeric type rendering available reshaped skim_df objects, generated partition() yank() particular. Variable type: numeric","code":"skim(Orange) skim(Orange) %>%   yank(\"numeric\")"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"customizing-print-options","dir":"Articles","previous_headings":"","what":"Customizing print options","title":"Using Skimr","text":"Although common use case outside writing vignettes skimr, can fall back default printing methods adding chunk option render = knitr::normal_print. can also disable skimr summary setting chunk option skimr_include_summary = FALSE. can change number digits shown columns generated statistics changing skimr_digits chunk option.","code":""},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"modifying-skim","dir":"Articles","previous_headings":"","what":"Modifying skim()","title":"Using Skimr","text":"skimr opinionated choice defaults, users can easily add, replace, remove statistics class. interactive use, can create skimming function skim_with() factory. skimr also API extensions packages. Working covered later. add statistic data type, create sfl() (skimr function list) class want change: Data summary Variable type: numeric previous example suggests, default append new summary statistics preexisting set. behavior isn’t always desirable, especially want lots changes. stop appending, set append = FALSE. Data summary Variable type: numeric can also use skim_with() remove specific statistics setting NULL. commonly used disable inline histograms spark graphs. Data summary Variable type: ts pattern applies changing skimmers multiple classes simultaneously. want partially-apply function arguments, use Tidyverse lambda syntax. Data summary Variable type: factor Variable type: numeric modify “base” skimmers, refer similar manner. Since base skimmers usually small group, must return type data types R, append doesn’t apply . Data summary Variable type: numeric","code":"my_skim <- skim_with(numeric = sfl(new_mad = mad)) my_skim(faithful) my_skim <- skim_with(numeric = sfl(new_mad = mad), append = FALSE) my_skim(faithful) no_hist <- skim_with(ts = sfl(line_graph = NULL)) no_hist(Nile) my_skim <- skim_with(   numeric = sfl(total = ~ sum(., na.rm = TRUE)),   factor = sfl(missing = ~ sum(is.na(.))),   append = FALSE )  my_skim(iris) my_skim <- skim_with(base = sfl(length = length)) my_skim(faithful)"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"extending-skimr","dir":"Articles","previous_headings":"","what":"Extending skimr","title":"Using Skimr","text":"Packages may wish export skim() functions. Use skim_with() . fact, skimr generates version skim(). Alternatively, defaults another data types can added skimr get_skimmers generic. method data type return sfl(). Unlike sfl() used interactively, also need set skim_type argument. match method type function signature. Data summary Variable type: my_type extended example available vignette Supporting additional objects.","code":"#' @export my_package_skim <- skim_with() get_skimmers.my_type <- function(column) {   sfl(     skim_type = \"my_type\",     total = sum   ) }  my_data <- data.frame(   my_type = structure(1:3, class = c(\"my_type\", \"integer\")) ) skim(my_data)"},{"path":"https://docs.ropensci.org/skimr/articles/skimr.html","id":"solutions-to-common-rendering-problems","dir":"Articles","previous_headings":"","what":"Solutions to common rendering problems","title":"Using Skimr","text":"details rendering dependent operating system R running , locale installation, fonts installed. Rendering may also differ based whether occurs console knitting specific types documents HTML PDF. commonly reported problems involve rendering spark graphs (inline histogram line chart) Windows. One common fix switch locale. function fix_windows_histograms() . order render sparkgraphs html PDF histogram may need change fonts one supports blocks Braille (depending need). Please review separate vignette associated template details.","code":""},{"path":"https://docs.ropensci.org/skimr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elin Waring. Maintainer, author. Michael Quinn. Author. Amelia McNamara. Author. Eduardo Arino de la Rubia. Author. Hao Zhu. Author. Julia Lowndes. Contributor. Shannon Ellis. Author. Hope McLeod. Contributor. Hadley Wickham. Contributor. Kirill Müller. Contributor. RStudio, Inc.. Copyright holder.            Spark functions Connor Kirkpatrick. Contributor. Scott Brenstuhl. Contributor. Patrick Schratz. Contributor. lbusett. Contributor. Mikko Korpela. Contributor. Jennifer Thompson. Contributor. Harris McGehee. Contributor. Mark Roepke. Contributor. Patrick Kennedy. Contributor. Daniel Possenriede. Contributor. David Zimmermann. Contributor. Kyle Butts. Contributor. Bastian Torges. Contributor. Rick Saporta. Contributor. Henry Morgan Stewart. Contributor.","code":""},{"path":"https://docs.ropensci.org/skimr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Waring E, Quinn M, McNamara , Arino de la Rubia E, Zhu H, Ellis S (2024). skimr: Compact Flexible Summaries Data. R package version 2.1.5,  https://github.com/ropensci/skimr/, https://docs.ropensci.org/skimr/ (website).","code":"@Manual{,   title = {skimr: Compact and Flexible Summaries of Data},   author = {Elin Waring and Michael Quinn and Amelia McNamara and Eduardo {Arino de la Rubia} and Hao Zhu and Shannon Ellis},   year = {2024},   note = {R package version 2.1.5,  https://github.com/ropensci/skimr/},   url = {https://docs.ropensci.org/skimr/ (website)}, }"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"skimr-","dir":"","previous_headings":"","what":"Compact and Flexible Summaries of Data","title":"Compact and Flexible Summaries of Data","text":"skimr provides frictionless approach summary statistics conforms principle least surprise, displaying summary statistics user can skim quickly understand data. handles different data types returns skim_df object can included pipeline displayed nicely human reader. Note: skimr version 2 major changes skimr used programmatically. Upgraders review document, release notes vignettes carefully.","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compact and Flexible Summaries of Data","text":"current released version skimr can installed CRAN. wish install current build next release can using following: APIs branch considered reasonably stable still subject change issue discovered. install version recent changes yet incorporated main branch (may ): rely APIs develop branch, likely change.","code":"# install.packages(\"devtools\") devtools::install_github(\"ropensci/skimr\") devtools::install_github(\"ropensci/skimr\", ref = \"develop\")"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"skim-statistics-in-the-console","dir":"","previous_headings":"","what":"Skim statistics in the console","title":"Compact and Flexible Summaries of Data","text":"skimr: Provides larger set statistics summary(), including missing, complete, n, sd. reports data types separately handles dates, logicals, variety types supports spark-bar spark-line based pillar package.","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"separates-variables-by-class","dir":"","previous_headings":"Skim statistics in the console","what":"Separates variables by class:","title":"Compact and Flexible Summaries of Data","text":"","code":"skim(chickwts)  ## ── Data Summary ──────────────────────── ##                            Values   ## Name                       chickwts ## Number of rows             71       ## Number of columns          2        ## _______________________             ## Column type frequency:              ##   factor                   1        ##   numeric                  1        ## ________________________            ## Group variables            None     ##  ## ── Variable type: factor ─────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate ordered n_unique top_counts                         ## 1 feed                  0             1 FALSE          6 soy: 14, cas: 12, lin: 12, sun: 12 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean   sd  p0  p25 p50  p75 p100 hist  ## 1 weight                0             1 261. 78.1 108 204. 258 324.  423 ▆▆▇▇▃"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"presentation-is-in-a-compact-horizontal-format","dir":"","previous_headings":"Skim statistics in the console","what":"Presentation is in a compact horizontal format:","title":"Compact and Flexible Summaries of Data","text":"","code":"skim(iris)  ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  4      ## ________________________          ## Group variables            None   ##  ## ── Variable type: factor ─────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate ordered n_unique top_counts                ## 1 Species               0             1 FALSE          3 set: 50, ver: 50, vir: 50 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ ## 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ ## 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ ## 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"built-in-support-for-strings-lists-and-other-column-classes","dir":"","previous_headings":"Skim statistics in the console","what":"Built in support for strings, lists and other column classes","title":"Compact and Flexible Summaries of Data","text":"","code":"skim(dplyr::starwars)  ## ── Data Summary ──────────────────────── ##                            Values          ## Name                       dplyr::starwars ## Number of rows             87              ## Number of columns          14              ## _______________________                    ## Column type frequency:                     ##   character                8               ##   list                     3               ##   numeric                  3               ## ________________________                   ## Group variables            None            ##  ## ── Variable type: character ──────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate min max empty n_unique whitespace ## 1 name                  0         1       3  21     0       87          0 ## 2 hair_color            5         0.943   4  13     0       12          0 ## 3 skin_color            0         1       3  19     0       31          0 ## 4 eye_color             0         1       3  13     0       15          0 ## 5 sex                   4         0.954   4  14     0        4          0 ## 6 gender                4         0.954   8   9     0        2          0 ## 7 homeworld            10         0.885   4  14     0       48          0 ## 8 species               4         0.954   3  14     0       37          0 ##  ## ── Variable type: list ───────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate n_unique min_length max_length ## 1 films                 0             1       24          1          7 ## 2 vehicles              0             1       11          0          2 ## 3 starships             0             1       17          0          5 ##  ## ── Variable type: numeric ────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate  mean    sd p0   p25 p50   p75 p100 hist  ## 1 height                6         0.931 174.   34.8 66 167   180 191    264 ▁▁▇▅▁ ## 2 mass                 28         0.678  97.3 169.  15  55.6  79  84.5 1358 ▇▁▁▁▁ ## 3 birth_year           44         0.494  87.6 155.   8  35    52  72    896 ▇▁▁▁▁"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"has-a-useful-summary-function","dir":"","previous_headings":"Skim statistics in the console","what":"Has a useful summary function","title":"Compact and Flexible Summaries of Data","text":"","code":"skim(iris) %>%   summary()  ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   factor                   1      ##   numeric                  4      ## ________________________          ## Group variables            None"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"individual-columns-can-be-selected-using-tidyverse-style-selectors","dir":"","previous_headings":"Skim statistics in the console","what":"Individual columns can be selected using tidyverse-style selectors","title":"Compact and Flexible Summaries of Data","text":"","code":"skim(iris, Sepal.Length, Petal.Length)  ## ── Data Summary ──────────────────────── ##                            Values ## Name                       iris   ## Number of rows             150    ## Number of columns          5      ## _______________________           ## Column type frequency:            ##   numeric                  2      ## ________________________          ## Group variables            None   ##  ## ── Variable type: numeric ────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  ## 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ ## 2 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"handles-grouped-data","dir":"","previous_headings":"Skim statistics in the console","what":"Handles grouped data","title":"Compact and Flexible Summaries of Data","text":"skim() can handle data grouped using dplyr::group_by().","code":"iris %>%   dplyr::group_by(Species) %>%   skim()  ## ── Data Summary ──────────────────────── ##                            Values     ## Name                       Piped data ## Number of rows             150        ## Number of columns          5          ## _______________________               ## Column type frequency:                ##   numeric                  4          ## ________________________              ## Group variables            Species    ##  ## ── Variable type: numeric ────────────────────────────────────────────────────────────────────────── ##    skim_variable Species    n_missing complete_rate  mean    sd  p0  p25  p50  p75 p100 hist  ##  1 Sepal.Length  setosa             0             1 5.01  0.352 4.3 4.8  5    5.2   5.8 ▃▃▇▅▁ ##  2 Sepal.Length  versicolor         0             1 5.94  0.516 4.9 5.6  5.9  6.3   7   ▂▇▆▃▃ ##  3 Sepal.Length  virginica          0             1 6.59  0.636 4.9 6.22 6.5  6.9   7.9 ▁▃▇▃▂ ##  4 Sepal.Width   setosa             0             1 3.43  0.379 2.3 3.2  3.4  3.68  4.4 ▁▃▇▅▂ ##  5 Sepal.Width   versicolor         0             1 2.77  0.314 2   2.52 2.8  3     3.4 ▁▅▆▇▂ ##  6 Sepal.Width   virginica          0             1 2.97  0.322 2.2 2.8  3    3.18  3.8 ▂▆▇▅▁ ##  7 Petal.Length  setosa             0             1 1.46  0.174 1   1.4  1.5  1.58  1.9 ▁▃▇▃▁ ##  8 Petal.Length  versicolor         0             1 4.26  0.470 3   4    4.35 4.6   5.1 ▂▂▇▇▆ ##  9 Petal.Length  virginica          0             1 5.55  0.552 4.5 5.1  5.55 5.88  6.9 ▃▇▇▃▂ ## 10 Petal.Width   setosa             0             1 0.246 0.105 0.1 0.2  0.2  0.3   0.6 ▇▂▂▁▁ ## 11 Petal.Width   versicolor         0             1 1.33  0.198 1   1.2  1.3  1.5   1.8 ▅▇▃▆▁ ## 12 Petal.Width   virginica          0             1 2.03  0.275 1.4 1.8  2    2.3   2.5 ▂▇▆▅▇"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"behaves-nicely-in-pipelines","dir":"","previous_headings":"Skim statistics in the console","what":"Behaves nicely in pipelines","title":"Compact and Flexible Summaries of Data","text":"","code":"iris %>%   skim() %>%   dplyr::filter(numeric.sd > 1)  ## ── Data Summary ──────────────────────── ##                            Values     ## Name                       Piped data ## Number of rows             150        ## Number of columns          5          ## _______________________               ## Column type frequency:                ##   numeric                  1          ## ________________________              ## Group variables            None       ##  ## ── Variable type: numeric ────────────────────────────────────────────────────────────────────────── ##   skim_variable n_missing complete_rate mean   sd p0 p25  p50 p75 p100 hist  ## 1 Petal.Length          0             1 3.76 1.77  1 1.6 4.35 5.1  6.9 ▇▁▆▇▂"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"knitted-results","dir":"","previous_headings":"","what":"Knitted results","title":"Compact and Flexible Summaries of Data","text":"Simply skimming data frame produce horizontal print layout shown . provide knit_print method types objects package similar results produced documents. use , make sure skimmed object last item code chunk. Data summary Data summary Variable type: numeric","code":"faithful %>%   skim()"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"customizing-skimr","dir":"","previous_headings":"","what":"Customizing skimr","title":"Compact and Flexible Summaries of Data","text":"Although skimr provides opinionated defaults, highly customizable. Users can specify statistics, change formatting results, create statistics new classes develop skimmers data structures data frames.","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"specify-your-own-statistics-and-classes","dir":"","previous_headings":"Customizing skimr","what":"Specify your own statistics and classes","title":"Compact and Flexible Summaries of Data","text":"Users can specify statistics using list combined skim_with() function factory. skim_with() returns new skim function can called data. can use factory produce summaries type column within data. Assignment within call skim_with() relies helper function, sfl skimr function list. default, functions sfl call appended default skimmers, names automatically generated well. can also helpers tidyverse create new anonymous functions set particular function arguments. behavior purrr dplyr, . .x acceptable pronouns. Setting append = FALSE argument uses functions ’ve provided. can remove default skimmers setting NULL.","code":"my_skim <- skim_with(numeric = sfl(mad)) my_skim(iris, Sepal.Length) my_skim <- skim_with(   numeric = sfl(     iqr = IQR,     p01 = ~ quantile(.x, probs = .01)     p99 = ~ quantile(., probs = .99)   ),   append = FALSE ) my_skim(iris, Sepal.Length) my_skim <- skim_with(numeric = sfl(hist = NULL)) my_skim(iris, Sepal.Length)"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"skimming-other-objects","dir":"","previous_headings":"Customizing skimr","what":"Skimming other objects","title":"Compact and Flexible Summaries of Data","text":"skimr summary functions following types data default: numeric (includes double integer) character factor logical complex Date POSIXct ts AsIs skimr also provides small API writing packages provide default summary functions data types covered . relies R S3 methods get_skimmers function. function return sfl, similar customization within skim_with(), also provide value class argument. ’s example.","code":"get_skimmers.my_data_type <- function(column) {   sfl(     .class = \"my_data_type\",     p99 = quantile(., probs = .99)   ) }"},{"path":"https://docs.ropensci.org/skimr/index.html","id":"limitations-of-current-version","dir":"","previous_headings":"","what":"Limitations of current version","title":"Compact and Flexible Summaries of Data","text":"aware issues rendering inline histograms line charts various contexts, described .","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"support-for-spark-histograms","dir":"","previous_headings":"Limitations of current version","what":"Support for spark histograms","title":"Compact and Flexible Summaries of Data","text":"known issues printing spark-histogram characters printing data frame. example, \"▂▅▇\" printed \"<U+2582><U+2585><U+2587>\". longstanding problem originates low-level code printing dataframes. cases addressed, , example, reports issue Emacs ESS. deep issue, ongoing work address base R. means skimr can render histograms console RMarkdown documents, circumstances. includes: converting skimr data frame vanilla R data frame, tibbles render correctly context rendering pdf using engine support utf-8. One workaround showing characters Windows set CTYPE part locale Chinese/Japanese/Korean Sys.setlocale(\"LC_CTYPE\", \"Chinese\"). helper function fix_windows_histograms() . last least, provide skim_without_charts() fallback. makes easy still get summaries data, even unicode issues continue.","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"printing-spark-histograms-and-line-graphs-in-knitted-documents","dir":"","previous_headings":"Limitations of current version","what":"Printing spark histograms and line graphs in knitted documents","title":"Compact and Flexible Summaries of Data","text":"Spark-bar spark-line work console, may work knit specific document format. session produces correctly rendered HTML document may produce incorrectly rendered PDF, example. issue can generally addressed changing fonts one good building block (histograms) Braille support (line graphs). example, open font “DejaVu Sans” extrafont package supports . may also want try wrapping results knitr::kable(). Please see vignette using fonts details. Displays documents different types vary. example, one user found font “Yu Gothic UI Semilight” produced consistent results Microsoft Word Libre Office Write.","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"inspirations","dir":"","previous_headings":"","what":"Inspirations","title":"Compact and Flexible Summaries of Data","text":"TextPlots use Braille characters spark use block characters. earliest use unicode characters generate sparklines appears 2009. Exercising ideas fullest requires font good support block drawing characters. PragamataPro one font.","code":""},{"path":"https://docs.ropensci.org/skimr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Compact and Flexible Summaries of Data","text":"welcome issue reports pull requests, including potentially adding support commonly used variable classes. However, general, encourage users take advantage skimr’s flexibility add customized classes. Please see contributing conduct documents.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/deprecated-v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions from skimr v1 — deprecated-v1","title":"Deprecated functions from skimr v1 — deprecated-v1","text":"Skimr used offer functions combined skimming secondary effect, like reshaping data, building list printing results. behaviors longer necessary. skim() always returns wide data frame. Others replaced functions single thing. partition() creates list-like object skimmed data frame.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/deprecated-v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions from skimr v1 — deprecated-v1","text":"","code":"skim_to_wide(.data, ...)  skim_to_list(.data, ...)  skim_format(...)"},{"path":"https://docs.ropensci.org/skimr/reference/deprecated-v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions from skimr v1 — deprecated-v1","text":".data tibble, object can coerced tibble. ... Columns select skimming. none provided, default skim columns.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/deprecated-v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions from skimr v1 — deprecated-v1","text":"Either skim_df skim_list object.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/deprecated-v1.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Deprecated functions from skimr v1 — deprecated-v1","text":"skim_to_wide(): skim() always produces wide data frame. skim_to_list(): partition() creates list. skim_format(): print() skim_with() set options.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/fix_windows_histograms.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix unicode histograms on Windows — fix_windows_histograms","title":"Fix unicode histograms on Windows — fix_windows_histograms","text":"functions changes session's locale address issues printing histograms Windows.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/fix_windows_histograms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix unicode histograms on Windows — fix_windows_histograms","text":"","code":"fix_windows_histograms()"},{"path":"https://docs.ropensci.org/skimr/reference/fix_windows_histograms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix unicode histograms on Windows — fix_windows_histograms","text":"known issues printing spark-histogram characters printing data frame, appearing like : \"<U+2582><U+2585><U+2587>\". longstanding problem originates low-level code printing dataframes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/focus.html","id":null,"dir":"Reference","previous_headings":"","what":"Only show a subset of summary statistics after skimming — focus","title":"Only show a subset of summary statistics after skimming — focus","text":"function variant dplyr::select() designed work skim_df objects. using focus(), skimr metadata columns kept, skimr print methods still utilized. Otherwise, signature behavior identical dplyr::select().","code":""},{"path":"https://docs.ropensci.org/skimr/reference/focus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Only show a subset of summary statistics after skimming — focus","text":"","code":"focus(.data, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/focus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Only show a subset of summary statistics after skimming — focus","text":".data skim_df object. ... One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/focus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Only show a subset of summary statistics after skimming — focus","text":"","code":"# Compare iris %>%   skim() %>%   dplyr::select(n_missing) #> # A tibble: 5 × 1 #>   n_missing #>       <int> #> 1         0 #> 2         0 #> 3         0 #> 4         0 #> 5         0  iris %>%   skim() %>%   focus(n_missing) #> ── Data Summary ──────────────────────── #>                            Values     #> Name                       Piped data #> Number of rows             150        #> Number of columns          5          #> _______________________               #> Column type frequency:                #>   factor                   1          #>   numeric                  4          #> ________________________              #> Group variables            None       #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing #> 1 Species               0 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing #> 1 Sepal.Length          0 #> 2 Sepal.Width           0 #> 3 Petal.Length          0 #> 4 Petal.Width           0  # This is equivalent to iris %>%   skim() %>%   dplyr::select(skim_variable, skim_type, n_missing) #> ── Data Summary ──────────────────────── #>                            Values     #> Name                       Piped data #> Number of rows             150        #> Number of columns          5          #> _______________________               #> Column type frequency:                #>   factor                   1          #>   numeric                  4          #> ________________________              #> Group variables            None       #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing #> 1 Species               0 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing #> 1 Sepal.Length          0 #> 2 Sepal.Width           0 #> 3 Petal.Length          0 #> 4 Petal.Width           0"},{"path":"https://docs.ropensci.org/skimr/reference/get_default_skimmers.html","id":null,"dir":"Reference","previous_headings":"","what":"View default skimmer names and functions — get_default_skimmers","title":"View default skimmer names and functions — get_default_skimmers","text":"utility functions look currently-available defaults one skim_type's. work defaults skimr package, well defaults package extends skimr. See get_skimmers() writing lookup methods different.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_default_skimmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View default skimmer names and functions — get_default_skimmers","text":"","code":"get_default_skimmers(skim_type = NULL)  get_one_default_skimmer(skim_type)  get_default_skimmer_names(skim_type = NULL)  get_one_default_skimmer_names(skim_type)  get_sfl(skim_type)"},{"path":"https://docs.ropensci.org/skimr/reference/get_default_skimmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View default skimmer names and functions — get_default_skimmers","text":"skim_type class column skimmed.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_default_skimmers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View default skimmer names and functions — get_default_skimmers","text":"functions differ return type whether result list. get_default_skimmers() get_one_default_skimmer() return functions. former returns functions within typed list, .e. list(numeric = list(...functions...)). functions differ return type whether result list. get_default_skimmer_names() get_one_default_skimmer_names() return list character vectors single character vector. get_sfl() returns skimmer function list particular skim_type. differs get_default_skimmers() returned sfl contains list functions skim_type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_default_skimmers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"View default skimmer names and functions — get_default_skimmers","text":"get_one_default_skimmer(): Get functions associated one skim_type. get_default_skimmer_names(): Get names functions used one skim_type's. get_one_default_skimmer_names(): Get names functions used one skim_type. get_sfl(): Get sfl skim_type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the summary functions for a specific data type — get_skimmers","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"functions used set default skimming functions data type. combined base skim function list (sfl) skim_with(), create summary tibble type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"","code":"get_skimmers(column)  # S3 method for default get_skimmers(column)  # S3 method for numeric get_skimmers(column)  # S3 method for factor get_skimmers(column)  # S3 method for character get_skimmers(column)  # S3 method for logical get_skimmers(column)  # S3 method for complex get_skimmers(column)  # S3 method for Date get_skimmers(column)  # S3 method for POSIXct get_skimmers(column)  # S3 method for difftime get_skimmers(column)  # S3 method for Timespan get_skimmers(column)  # S3 method for ts get_skimmers(column)  # S3 method for list get_skimmers(column)  # S3 method for AsIs get_skimmers(column)  # S3 method for haven_labelled get_skimmers(column)  modify_default_skimmers(skim_type, new_skim_type = NULL, new_funs = list())"},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"column atomic vector list. column data frame. skim_type character scalar. class object default skimmers. new_skim_type type assign looked set skimmers. new_funs Replacement functions ","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"skim_function_list object.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"creating set skimming functions, call sfl() within get_skimmers() method particular type. call sfl() also provide matching class skim_type argument.  Otherwise, possible dynamically reassign default functions working interactively. Call get_default_skimmers() see functions type summary function currently supported. Call get_default_skimmer_names() just see names functions. Use modify_default_skimmers() method changing skim_type functions default sfl. useful creating new default sfl's.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"get_skimmers(default): default method skimming data. used column's data type match currently installed types. Call get_default_skimmer_names see defaults. get_skimmers(numeric): Summary functions numeric columns, covering double() integer() classes: mean(), sd(), quantile() inline_hist(). get_skimmers(factor): Summary functions factor columns: .ordered(), n_unique() top_counts(). get_skimmers(character): Summary functions character columns. Also, default unknown columns: min_char(), max_char(), n_empty(), n_unique() n_whitespace(). get_skimmers(logical): Summary functions logical/ boolean columns: mean(), produces rates value, top_counts(). get_skimmers(complex): Summary functions complex columns: mean(). get_skimmers(Date): Summary functions Date columns: min(), max(), median() n_unique(). get_skimmers(POSIXct): Summary functions POSIXct columns: min(), max(), median() n_unique(). get_skimmers(difftime): Summary functions difftime columns: min(), max(), median() n_unique(). get_skimmers(Timespan): Summary functions Timespan columns: min(), max(), median() n_unique(). get_skimmers(ts): Summary functions ts columns: min(), max(), median() n_unique(). get_skimmers(list): Summary functions list columns: n_unique(), list_min_length() list_max_length(). get_skimmers(AsIs): Summary functions AsIs columns: n_unique(), list_min_length() list_max_length(). get_skimmers(haven_labelled): Summary functions haven_labelled columns. Finds appropriate skimmers underlying data vector.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/get_skimmers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the summary functions for a specific data type — get_skimmers","text":"","code":"# Defining default skimming functions for a new class, `my_class`. # Note that the class argument is required for dynamic reassignment. get_skimmers.my_class <- function(column) {   sfl(     skim_type = \"my_class\",     mean,     sd   ) }  # Integer and double columns are both \"numeric\" and are treated the same # by default. To switch this behavior in another package, add a method. get_skimmers.integer <- function(column) {   sfl(     skim_type = \"integer\",     p50 = ~ stats::quantile(       .,       probs = .50, na.rm = TRUE, names = FALSE, type = 1     )   ) } x <- mtcars[c(\"gear\", \"carb\")] class(x$carb) <- \"integer\" skim(x) #> ── Data Summary ──────────────────────── #>                            Values #> Name                       x      #> Number of rows             32     #> Number of columns          2      #> _______________________           #> Column type frequency:            #>   numeric                  2      #> ________________________          #> Group variables            None   #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean    sd p0 p25 p50 p75 p100 hist  #> 1 gear                  0             1 3.69 0.738  3   3   4   4    5 ▇▁▆▁▂ #> 2 carb                  0             1 2.81 1.62   1   2   2   4    8 ▇▂▅▁▁ if (FALSE) { # In a package, to revert to the V1 behavior of skimming separately with the # same functions, assign the numeric `get_skimmers`. get_skimmers.integer <- skimr::get_skimmers.numeric  # Or, in a local session, use `skim_with` to create a different `skim`. new_skim <- skim_with(integer = skimr::get_skimmers.numeric())  # To apply a set of skimmers from an old type to a new type get_skimmers.new_type <- function(column) {   modify_default_skimmers(\"old_type\", new_skim_type = \"new_type\") } }"},{"path":"https://docs.ropensci.org/skimr/reference/knit_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide a default printing method for knitr. — knit_print","title":"Provide a default printing method for knitr. — knit_print","text":"Instead standard R output, knitr RMarkdown documents formatted knitr::kable() output return. can disable setting chunk option render = normal_print.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/knit_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide a default printing method for knitr. — knit_print","text":"","code":"# S3 method for skim_df knit_print(x, options = NULL, ...)  # S3 method for skim_list knit_print(x, options = NULL, ...)  # S3 method for one_skim_df knit_print(x, options = NULL, ...)  # S3 method for summary_skim_df knit_print(x, options = NULL, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/knit_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide a default printing method for knitr. — knit_print","text":"x R object printed options Options passed print function. ... Additional arguments passed S3 method. Currently ignored, except two optional arguments options inline; see references .","code":""},{"path":"https://docs.ropensci.org/skimr/reference/knit_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide a default printing method for knitr. — knit_print","text":"knit_asis object. used knitr rendered.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/knit_print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide a default printing method for knitr. — knit_print","text":"summary statistics original data frame can disabled setting knitr chunk option skimr_include_summary = FALSE. See knitr::opts_chunk information. can change number digits shown printed table skimr_digits chunk option. Alternatively, can call collapse() yank() get particular skim_df objects format however like. One warning though. histograms contain unicode characters, can unexpected print results, R varying levels unicode support. affects Windows users commonly. Call vignette(\"Using_fonts\") details.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/knit_print.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Provide a default printing method for knitr. — knit_print","text":"knit_print(skim_df): Default knitr print skim_df objects. knit_print(skim_list): Default knitr print skim_list. knit_print(one_skim_df): Default knitr print within partitioned skim_df. knit_print(summary_skim_df): Default knitr print skim_df summaries.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/mutate.skim_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate a skim_df — mutate.skim_df","title":"Mutate a skim_df — mutate.skim_df","text":"dplyr::mutate() currently drops attributes, need keep around skim behaviors. Otherwise behavior exactly . information, see https://github.com/tidyverse/dplyr/issues/3429.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/mutate.skim_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate a skim_df — mutate.skim_df","text":"","code":"# S3 method for skim_df mutate(.data, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/mutate.skim_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate a skim_df — mutate.skim_df","text":".data skim_df, behaves like tbl. ... Name-value pairs expressions, length 1 length number rows group, using dplyr::group_by(), entire input (using groups). name argument name new variable, value corresponding value. Use NULL value dplyr::mutate() drop variable. New variables overwrite existing variables name. arguments ... automatically quoted rlang::quo() evaluated rlang::eval_tidy() context data frame. support unquoting rlang::quasiquotation splicing. See vignette(\"programming\", package = \"dplyr\") introduction concepts.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/mutate.skim_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate a skim_df — mutate.skim_df","text":"skim_df object, also inherits class(es) input data. many ways, object behaves like tibble::tibble().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a big skim_df into smaller data frames, by type. — partition","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"data frames produced skim() wide sparse, filled columns mostly NA. reason, can convenient work \"type\" subsets original data frame. smaller subsets NA columns removed.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"","code":"partition(data)  bind(data)  yank(data, skim_type)"},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"data skim_df. skim_type character scalar. subtable extract skim_df.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"skim_list skim_df's, type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"partition() creates list smaller skim_df data frames. entry list data type original skim_df. inverse partition() bind(), takes list produces original skim_df. partition() keeps subtables list entries, yank() gives single subtable data type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"bind(): inverse partition(). Rebuild original skim_df. yank(): Extract subtable skim_df particular type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a big skim_df into smaller data frames, by type. — partition","text":"","code":"# Create a wide skimmed data frame (a skim_df) skimmed <- skim(iris)  # Separate into a list of subtables by type separate <- partition(skimmed)  # Put back together identical(bind(separate), skimmed) #> [1] TRUE # > TRUE  # Alternatively, get the subtable of a particular type yank(skimmed, \"factor\") #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate ordered n_unique top_counts              #> 1 Species               0             1 FALSE          3 set: 50, ver: 50, vir:…"},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print skim objects — print","title":"Print skim objects — print","text":"skimr custom print methods supported objects. Default printing methods knitr/ rmarkdown documents also provided.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print skim objects — print","text":"","code":"# S3 method for skim_df print(   x,   include_summary = TRUE,   n = Inf,   width = Inf,   summary_rule_width = getOption(\"skimr_summary_rule_width\", default = 40),   ... )  # S3 method for skim_list print(x, n = Inf, width = Inf, ...)  # S3 method for summary_skim_df print(x, .summary_rule_width = 40, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print skim objects — print","text":"x Object format print. include_summary Whether summary data frame printed n Number rows show. NULL, default, print rows less print_max option. Otherwise, print many rows specified print_min option. width Width text output generate. defaults NULL, means use width option. summary_rule_width Width Data Summary cli rule, defaults 40. ... Passed tbl_format_setup(). .summary_rule_width width main rule summary.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Print skim objects — print","text":"print(skim_df): Print skimmed data frame (skim_df skim()). print(skim_list): Print skim_list, list skim_df objects. print(summary_skim_df): Print method summary_skim_df object.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":"printing-options","dir":"Reference","previous_headings":"","what":"Printing options","title":"Print skim objects — print","text":"better worse, skimr often produces output can fit standard R console. Fortunately, modern environments like RStudio Jupyter support 80 character outputs. Call options(width = 90) get better experience skimr. print methods skimr wrap tibble package. can control printing behavior using global options.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":"behavior-in-dplyr-pipelines","dir":"Reference","previous_headings":"","what":"Behavior in dplyr pipelines","title":"Print skim objects — print","text":"Printing skim_df requires specific columns might dropped using dplyr::select() dplyr::summarize() skim_df. cases, method falls back tibble::print.tbl().","code":""},{"path":"https://docs.ropensci.org/skimr/reference/print.html","id":"options-for-controlling-print-behavior","dir":"Reference","previous_headings":"","what":"Options for controlling print behavior","title":"Print skim objects — print","text":"can control width rule line printed subtables option: skimr_table_header_width.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>% tidyselect contains, ends_with, everything, matches, num_range, one_of, starts_with","code":""},{"path":"https://docs.ropensci.org/skimr/reference/repr.html","id":null,"dir":"Reference","previous_headings":"","what":"Skimr printing within Jupyter notebooks — repr","title":"Skimr printing within Jupyter notebooks — repr","text":"reproduces printed results console. default Jupyter kernels render final object cell. want version printed skimr instead data contains.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/repr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skimr printing within Jupyter notebooks — repr","text":"","code":"# S3 method for skim_df repr_text(obj, ...)  # S3 method for skim_list repr_text(obj, ...)  # S3 method for one_skim_df repr_text(obj, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/repr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skimr printing within Jupyter notebooks — repr","text":"obj object print return output. ... ignored.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/repr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skimr printing within Jupyter notebooks — repr","text":"None. invisible(NULL).","code":""},{"path":"https://docs.ropensci.org/skimr/reference/sfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a skimr function list — sfl","title":"Create a skimr function list — sfl","text":"constructor used create named list functions. also also pass NULL identify skimming function wish remove. functions return single value, working dplyr::summarize(), can used within sfl.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/sfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a skimr function list — sfl","text":"","code":"sfl(..., skim_type = \"\")"},{"path":"https://docs.ropensci.org/skimr/reference/sfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a skimr function list — sfl","text":"... Inherited dplyr::data_masking() dplyr version 1 later dplyr::funs() older versions dplyr. list functions specified : name, \"mean\" function , mean call function . dummy argument, mean(., na.rm = TRUE) anonymous function purrr notation, ~mean(., na.rm = TRUE) skim_type character scalar. used match locally-provided skimmers defaults. See get_skimmers() detail.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/sfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a skimr function list — sfl","text":"skimr_function_list, contains list fun_calls, returned dplyr::funs() list skimming functions drop.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/sfl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a skimr function list — sfl","text":"sfl() automatically generate callables names variety inputs, including functions, formulas strings. Nonetheless, recommend providing names reasonable get better skim() output.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/sfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a skimr function list — sfl","text":"","code":"# sfl's can take a variety of input formats and will generate names # if not provided. sfl(mad, \"var\", ~ length(.)^2) #> $funs #> $funs$mad #> function (x, center = median(x), constant = 1.4826, na.rm = FALSE,  #>     low = FALSE, high = FALSE)  #> { #>     if (na.rm)  #>         x <- x[!is.na(x)] #>     n <- length(x) #>     constant * if ((low || high) && n%%2 == 0) { #>         if (low && high)  #>             stop(\"'low' and 'high' cannot be both TRUE\") #>         n2 <- n%/%2 + as.integer(high) #>         sort(abs(x - center), partial = n2)[n2] #>     } #>     else median(abs(x - center)) #> } #> <bytecode: 0x5646d23bd568> #> <environment: namespace:stats> #>  #> $funs$`\"var\"` #> [1] \"var\" #>  #> $funs$`~length(.)^2` #> ~length(.)^2 #> <environment: 0x5646d2350470> #>  #>  #> $skim_type #> [1] \"\" #>  #> attr(,\"class\") #> [1] \"skimr_function_list\"  # But these can generate unpredictable names in your output. # Better to set your own names. sfl(mad = mad, variance = \"var\", length_sq = ~ length(.)^2) #> $funs #> $funs$mad #> function (x, center = median(x), constant = 1.4826, na.rm = FALSE,  #>     low = FALSE, high = FALSE)  #> { #>     if (na.rm)  #>         x <- x[!is.na(x)] #>     n <- length(x) #>     constant * if ((low || high) && n%%2 == 0) { #>         if (low && high)  #>             stop(\"'low' and 'high' cannot be both TRUE\") #>         n2 <- n%/%2 + as.integer(high) #>         sort(abs(x - center), partial = n2)[n2] #>     } #>     else median(abs(x - center)) #> } #> <bytecode: 0x5646d23bd568> #> <environment: namespace:stats> #>  #> $funs$variance #> [1] \"var\" #>  #> $funs$length_sq #> ~length(.)^2 #> <environment: 0x5646d2350470> #>  #>  #> $skim_type #> [1] \"\" #>  #> attr(,\"class\") #> [1] \"skimr_function_list\"  # sfl's can remove individual skimmers from defaults by passing NULL. sfl(hist = NULL) #> $funs #> $funs$hist #> NULL #>  #>  #> $skim_type #> [1] \"\" #>  #> attr(,\"class\") #> [1] \"skimr_function_list\"  # When working interactively, you don't need to set a type. # But you should when defining new defaults with `get_skimmers()`. get_skimmers.my_new_class <- function(column) {   sfl(n_missing, skim_type = \"my_new_class\") }"},{"path":"https://docs.ropensci.org/skimr/reference/skim-attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for accessing skim_df attributes — skim-attr","title":"Functions for accessing skim_df attributes — skim-attr","text":"functions simplify access attributes contained within skim_df. attributes read-, able extract information useful different analyses. functions always preferred calling base R's attribute functions.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for accessing skim_df attributes — skim-attr","text":"","code":"data_rows(object)  data_cols(object)  df_name(object)  dt_key(object)  group_names(object)  base_skimmers(object)  skimmers_used(object)"},{"path":"https://docs.ropensci.org/skimr/reference/skim-attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for accessing skim_df attributes — skim-attr","text":"object skim_df skim_list.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for accessing skim_df attributes — skim-attr","text":"Data contained within requested skimr attribute.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-attr.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions for accessing skim_df attributes — skim-attr","text":"data_rows(): Get number rows skimmed data frame. data_cols(): Get number columns skimmed data frame. df_name(): Get name skimmed data frame. available contexts name can looked . often case within pipeline. dt_key(): Get key skimmed data.table. available contexts data class data.table. group_names(): Get names groups original data frame. available data grouped. Otherwise, NULL. base_skimmers(): Get names base skimming functions used. skimmers_used(): Get names skimming functions used, separated data type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an object is compatible with skimr — skim-obj","title":"Test if an object is compatible with skimr — skim-obj","text":"Objects within skimr identified class, require additional attributes data columns operations succeed. checks help ensure . application externally, mostly used internally.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an object is compatible with skimr — skim-obj","text":"","code":"has_type_column(object)  has_variable_column(object)  has_skimr_attributes(object)  has_skim_type_attribute(object)  has_skimmers(object)  is_data_frame(object)  is_skim_df(object)  is_one_skim_df(object)  is_skim_list(object)  could_be_skim_df(object)  assert_is_skim_df(object)  assert_is_skim_list(object)  assert_is_one_skim_df(object)"},{"path":"https://docs.ropensci.org/skimr/reference/skim-obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an object is compatible with skimr — skim-obj","text":"object R object.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-obj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if an object is compatible with skimr — skim-obj","text":"notably, skim_df columns skim_type skim_variable. following special attributes data_rows: n rows original data data_cols: original number columns df_name: name original data frame dt_key: name key original data.table groups: group variables base_skimmers: names functions applied skim types skimmers_used: names functions used skim type functions checks work like .equal(). return TRUE check passes, otherwise notifies check failed. makes useful throwing errors.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim-obj.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Test if an object is compatible with skimr — skim-obj","text":"has_type_column(): object skim_type column? has_variable_column(): object skim_variable column? has_skimr_attributes(): object appropriate skimr attributes? has_skim_type_attribute(): object skim_type attribute? makes one_skim_df. has_skimmers(): object skimmers? is_data_frame(): object data frame? is_skim_df(): object skim_df? is_one_skim_df(): object one_skim_df? similar skim_df, type column. stored attribute instead. is_skim_list(): object skim_list? could_be_skim_df(): data frame skim_variable skim_type columns? assert_is_skim_df(): Stop object skim_df. assert_is_skim_list(): Stop object skim_list. assert_is_one_skim_df(): Stop object one_skim_df.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":null,"dir":"Reference","previous_headings":"","what":"Skim a data frame, getting useful summary statistics — skim","title":"Skim a data frame, getting useful summary statistics — skim","text":"skim() alternative summary(), quickly providing broad overview data frame. handles data types, dispatching different set summary functions based types columns data frame.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skim a data frame, getting useful summary statistics — skim","text":"","code":"skim(data, ..., .data_name = NULL)  skim_tee(data, ..., skim_fun = skim)  skim_without_charts(data, ..., .data_name = NULL)"},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skim a data frame, getting useful summary statistics — skim","text":"data tibble, object can coerced tibble. ... Columns select skimming. none provided, default skim columns. .data_name name use data. Defaults data. skim_fun skim function used. skim skimming function use skim_tee().","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skim a data frame, getting useful summary statistics — skim","text":"skim_df object, also inherits class(es) input data. many ways, object behaves like tibble::tibble().","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skim a data frame, getting useful summary statistics — skim","text":"call produces skim_df, fundamentally tibble special print method. One unusual feature data frame pseudo- namespace columns. skim() computes statistics data type, stores data frame <type>.<statistic>. types stripped printing results. \"base\" skimmers (n_missing complete_rate) columns follow behavior. See skim_with() details customizing skim() get_default_skimmers() list default functions. just want see printed output, call skim_tee() instead. function returns original data. skim_tee() uses default skim(), can replace skim argument. data frame produced skim wide sparse. avoid type coercion skimr uses type namespace summary statistics. Columns numeric summary statistics begin numeric; factor summary statistics begin factor; . See partition() yank() methods transforming wide data frame. first function splits list, entry corresponding data type. latter pulls single subtable particular type skim_df. skim() designed operate pipes generally play nicely tidyverse functions. means can use tidyselect helpers within skim select drop specific columns summary. can also work skim_df using dplyr functions pipeline.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"customizing-skim","dir":"Reference","previous_headings":"","what":"Customizing skim","title":"Skim a data frame, getting useful summary statistics — skim","text":"skim() intentionally simple function, minimal arguments like summary(). Nonetheless, package provides two broad approaches can customize skim()'s behavior. can customize functions called produce summary statistics skim_with().","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"unicode-rendering","dir":"Reference","previous_headings":"","what":"Unicode rendering","title":"Skim a data frame, getting useful summary statistics — skim","text":"rendered examples show unencoded values <U+2587> need change locale allow proper rendering. Please review Using Skimr vignette information (vignette(\"Using_skimr\", package = \"skimr\")). Otherwise, export skim_without_charts() produce summaries without spark graphs. source unicode dependency.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skim a data frame, getting useful summary statistics — skim","text":"","code":"skim(iris) #> ── Data Summary ──────────────────────── #>                            Values #> Name                       iris   #> Number of rows             150    #> Number of columns          5      #> _______________________           #> Column type frequency:            #>   factor                   1      #>   numeric                  4      #> ________________________          #> Group variables            None   #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate ordered n_unique #> 1 Species               0             1 FALSE          3 #>   top_counts                #> 1 set: 50, ver: 50, vir: 50 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  #> 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ #> 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ #> 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ #> 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃  # Use tidyselect skim(iris, Species) #> ── Data Summary ──────────────────────── #>                            Values #> Name                       iris   #> Number of rows             150    #> Number of columns          5      #> _______________________           #> Column type frequency:            #>   factor                   1      #> ________________________          #> Group variables            None   #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate ordered n_unique #> 1 Species               0             1 FALSE          3 #>   top_counts                #> 1 set: 50, ver: 50, vir: 50 skim(iris, starts_with(\"Sepal\")) #> ── Data Summary ──────────────────────── #>                            Values #> Name                       iris   #> Number of rows             150    #> Number of columns          5      #> _______________________           #> Column type frequency:            #>   numeric                  2      #> ________________________          #> Group variables            None   #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean    sd  p0 p25 p50 p75 p100 hist  #> 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8 6.4  7.9 ▆▇▇▅▂ #> 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3   3.3  4.4 ▁▆▇▂▁ skim(iris, where(is.numeric)) #> ── Data Summary ──────────────────────── #>                            Values #> Name                       iris   #> Number of rows             150    #> Number of columns          5      #> _______________________           #> Column type frequency:            #>   numeric                  4      #> ________________________          #> Group variables            None   #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 hist  #> 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 ▆▇▇▅▂ #> 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 ▁▆▇▂▁ #> 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 ▇▁▆▇▂ #> 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5 ▇▁▇▅▃  # Skim also works groupwise iris %>%   dplyr::group_by(Species) %>%   skim() #> ── Data Summary ──────────────────────── #>                            Values     #> Name                       Piped data #> Number of rows             150        #> Number of columns          5          #> _______________________               #> Column type frequency:                #>   numeric                  4          #> ________________________              #> Group variables            Species    #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>    skim_variable Species    n_missing complete_rate  mean    sd  p0  p25  p50 #>  1 Sepal.Length  setosa             0             1 5.01  0.352 4.3 4.8  5    #>  2 Sepal.Length  versicolor         0             1 5.94  0.516 4.9 5.6  5.9  #>  3 Sepal.Length  virginica          0             1 6.59  0.636 4.9 6.22 6.5  #>  4 Sepal.Width   setosa             0             1 3.43  0.379 2.3 3.2  3.4  #>  5 Sepal.Width   versicolor         0             1 2.77  0.314 2   2.52 2.8  #>  6 Sepal.Width   virginica          0             1 2.97  0.322 2.2 2.8  3    #>  7 Petal.Length  setosa             0             1 1.46  0.174 1   1.4  1.5  #>  8 Petal.Length  versicolor         0             1 4.26  0.470 3   4    4.35 #>  9 Petal.Length  virginica          0             1 5.55  0.552 4.5 5.1  5.55 #> 10 Petal.Width   setosa             0             1 0.246 0.105 0.1 0.2  0.2  #> 11 Petal.Width   versicolor         0             1 1.33  0.198 1   1.2  1.3  #> 12 Petal.Width   virginica          0             1 2.03  0.275 1.4 1.8  2    #>     p75 p100 hist  #>  1 5.2   5.8 ▃▃▇▅▁ #>  2 6.3   7   ▂▇▆▃▃ #>  3 6.9   7.9 ▁▃▇▃▂ #>  4 3.68  4.4 ▁▃▇▅▂ #>  5 3     3.4 ▁▅▆▇▂ #>  6 3.18  3.8 ▂▆▇▅▁ #>  7 1.58  1.9 ▁▃▇▃▁ #>  8 4.6   5.1 ▂▂▇▇▆ #>  9 5.88  6.9 ▃▇▇▃▂ #> 10 0.3   0.6 ▇▂▂▁▁ #> 11 1.5   1.8 ▅▇▃▆▁ #> 12 2.3   2.5 ▂▇▆▅▇  # Which five numeric columns have the greatest mean value? # Look in the `numeric.mean` column. iris %>%   skim() %>%   dplyr::select(numeric.mean) %>%   dplyr::top_n(5) #> Selecting by numeric.mean #> # A tibble: 4 × 1 #>   numeric.mean #>          <dbl> #> 1         5.84 #> 2         3.06 #> 3         3.76 #> 4         1.20  # Which of my columns have missing values? Use the base skimmer n_missing. iris %>%   skim() %>%   dplyr::filter(n_missing > 0) #> # A tibble: 0 × 15 #> # ℹ 15 variables: skim_type <chr>, skim_variable <chr>, n_missing <int>, #> #   complete_rate <dbl>, factor.ordered <lgl>, factor.n_unique <int>, #> #   factor.top_counts <chr>, numeric.mean <dbl>, numeric.sd <dbl>, #> #   numeric.p0 <dbl>, numeric.p25 <dbl>, numeric.p50 <dbl>, numeric.p75 <dbl>, #> #   numeric.p100 <dbl>, numeric.hist <chr>  # Use skim_tee to view the skim results and # continue using the original data. chickwts %>%   skim_tee() %>%   dplyr::filter(feed == \"sunflower\") #> ── Data Summary ──────────────────────── #>                            Values #> Name                       data   #> Number of rows             71     #> Number of columns          2      #> _______________________           #> Column type frequency:            #>   factor                   1      #>   numeric                  1      #> ________________________          #> Group variables            None   #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate ordered n_unique #> 1 feed                  0             1 FALSE          6 #>   top_counts                         #> 1 soy: 14, cas: 12, lin: 12, sun: 12 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean   sd  p0  p25 p50  p75 p100 hist  #> 1 weight                0             1 261. 78.1 108 204. 258 324.  423 ▆▆▇▇▃ #>    weight      feed #> 1     423 sunflower #> 2     340 sunflower #> 3     392 sunflower #> 4     339 sunflower #> 5     341 sunflower #> 6     226 sunflower #> 7     320 sunflower #> 8     295 sunflower #> 9     334 sunflower #> 10    322 sunflower #> 11    297 sunflower #> 12    318 sunflower  # Produce a summary without spark graphs iris %>%   skim_without_charts() #> ── Data Summary ──────────────────────── #>                            Values     #> Name                       Piped data #> Number of rows             150        #> Number of columns          5          #> _______________________               #> Column type frequency:                #>   factor                   1          #>   numeric                  4          #> ________________________              #> Group variables            None       #>  #> ── Variable type: factor ─────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate ordered n_unique #> 1 Species               0             1 FALSE          3 #>   top_counts                #> 1 set: 50, ver: 50, vir: 50 #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate mean    sd  p0 p25  p50 p75 p100 #> 1 Sepal.Length          0             1 5.84 0.828 4.3 5.1 5.8  6.4  7.9 #> 2 Sepal.Width           0             1 3.06 0.436 2   2.8 3    3.3  4.4 #> 3 Petal.Length          0             1 3.76 1.77  1   1.6 4.35 5.1  6.9 #> 4 Petal.Width           0             1 1.20 0.762 0.1 0.3 1.3  1.8  2.5"},{"path":"https://docs.ropensci.org/skimr/reference/skim_with.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or add the summary functions for a particular type of data — skim_with","title":"Set or add the summary functions for a particular type of data — skim_with","text":"skim designed around opinionated set defaults, can use function change summary statistics returns.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or add the summary functions for a particular type of data — skim_with","text":"","code":"skim_with(   ...,   base = sfl(n_missing = n_missing, complete_rate = complete_rate),   append = TRUE )"},{"path":"https://docs.ropensci.org/skimr/reference/skim_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or add the summary functions for a particular type of data — skim_with","text":"... One (sfl) skimmer_function_list objects, argument name matches particular data type. base sfl sets skimmers column types. append Whether provided options addition defaults already skim. Default TRUE.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim_with.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or add the summary functions for a particular type of data — skim_with","text":"new skim() function. callable. See skim() details.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim_with.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set or add the summary functions for a particular type of data — skim_with","text":"skim_with() closure: function returns new function. lets several skimming functions single R session, also means need assign return skim_with() can use . assign values within skim_with using sfl() helper (skimr function list). helper behaves mostly like dplyr::funs(), lets also identify skimming functions want remove, setting NULL. Assign sfl column type wish modify. Functions summarize data types, always return type value, can assigned base argument. default base skimmers compute number missing values n_missing() rate values complete, .e. missing, complete_rate(). append = TRUE local skimmers names matching names entries default skim_function_list, values default list overwritten. Similarly, NULL values passed within sfl(), default skimmers dropped. Otherwise, append = FALSE, locally-provided skimming functions used. Note append applies typed skimmers (.e. non-base). See get_default_skimmer_names() list defaults.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skim_with.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or add the summary functions for a particular type of data — skim_with","text":"","code":"# Use new functions for numeric functions. If you don't provide a name, # one will be automatically generated. my_skim <- skim_with(numeric = sfl(median, mad), append = FALSE) my_skim(faithful) #> ── Data Summary ──────────────────────── #>                            Values   #> Name                       faithful #> Number of rows             272      #> Number of columns          2        #> _______________________             #> Column type frequency:              #>   numeric                  2        #> ________________________            #> Group variables            None     #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate median    mad #> 1 eruptions             0             1      4  0.951 #> 2 waiting               0             1     76 11.9    # If you want to remove a particular skimmer, set it to NULL # This removes the inline histogram my_skim <- skim_with(numeric = sfl(hist = NULL)) my_skim(faithful) #> ── Data Summary ──────────────────────── #>                            Values   #> Name                       faithful #> Number of rows             272      #> Number of columns          2        #> _______________________             #> Column type frequency:              #>   numeric                  2        #> ________________________            #> Group variables            None     #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate  mean    sd   p0   p25 p50   p75 p100 #> 1 eruptions             0             1  3.49  1.14  1.6  2.16   4  4.45  5.1 #> 2 waiting               0             1 70.9  13.6  43   58     76 82    96    # This works with multiple skimmers. Just match names to overwrite my_skim <- skim_with(numeric = sfl(iqr = IQR, p25 = NULL, p75 = NULL)) my_skim(faithful) #> ── Data Summary ──────────────────────── #>                            Values   #> Name                       faithful #> Number of rows             272      #> Number of columns          2        #> _______________________             #> Column type frequency:              #>   numeric                  2        #> ________________________            #> Group variables            None     #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>   skim_variable n_missing complete_rate  mean    sd   p0 p50 p100 hist    iqr #> 1 eruptions             0             1  3.49  1.14  1.6   4  5.1 ▇▂▂▇▇  2.29 #> 2 waiting               0             1 70.9  13.6  43    76 96   ▃▃▂▇▂ 24     # Alternatively, set `append = FALSE` to replace the skimmers of a type. my_skim <- skim_with(numeric = sfl(mean = mean, sd = sd), append = FALSE)  # Skimmers are unary functions. Partially apply arguments during assigment. # For example, you might want to remove NA values. my_skim <- skim_with(numeric = sfl(iqr = ~ IQR(., na.rm = TRUE)))  # Set multiple types of skimmers simultaneously. my_skim <- skim_with(numeric = sfl(mean), character = sfl(length))  # Or pass the same as a list, unquoting the input. my_skimmers <- list(numeric = sfl(mean), character = sfl(length)) my_skim <- skim_with(!!!my_skimmers)  # Use the v1 base skimmers instead. my_skim <- skim_with(base = sfl(   missing = n_missing,   complete = n_complete,   n = length ))  # Remove the base skimmers entirely my_skim <- skim_with(base = NULL)"},{"path":"https://docs.ropensci.org/skimr/reference/skimr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Skim a data frame — skimr-package","title":"Skim a data frame — skimr-package","text":"package provides alternative default summary functions within R. package's API tidy, functions take data frames, return data frames can work part pipeline. returned skimr object subsettable offers human readable output.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skimr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skim a data frame — skimr-package","text":"skimr opinionated, providing strong set summary statistics generated variety different data types. also provides API customization. Users can change functions dispatched way results formatted.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skimr-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for working with the vctrs package — skimr-vctrs","title":"Functions for working with the vctrs package — skimr-vctrs","text":"make clear need use tibble behavior joining, concatenating casting skim_df objects. better discussion, important functions work, see: https://vctrs.r-lib.org/reference/howto-faq-coercion-data-frame.html.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/skimr-vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for working with the vctrs package — skimr-vctrs","text":"","code":"# S3 method for skim_df.skim_df vec_ptype2(x, y, ...)  # S3 method for skim_df.tbl_df vec_ptype2(x, y, ...)  # S3 method for tbl_df.skim_df vec_ptype2(x, y, ...)  # S3 method for skim_df.skim_df vec_cast(x, to, ...)  # S3 method for skim_df.tbl_df vec_cast(x, to, ...)  # S3 method for tbl_df.skim_df vec_cast(x, to, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/skimr-vctrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for working with the vctrs package — skimr-vctrs","text":"vec_ptype2.* handles finding common prototypes skim_df similar objects. vec_cast.* handles casting objects. Note dplyr 1.0.2, dplyr::bind_rows() full support combining attributes vctrs::vec_rbind() preferred instead.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistic functions — stats","title":"Summary statistic functions — stats","text":"skimr provides extensions variety functions R's stats package simplify creating summaries data. functions vectorized first argument. Additional arguments set sfl() sets appropriate skimmers data type. can use , along vectorized R functions, creating custom sets summary functions given data type.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistic functions — stats","text":"","code":"n_missing(x)  n_complete(x)  complete_rate(x)  n_whitespace(x)  sorted_count(x)  top_counts(x, max_char = 3, max_levels = 4)  inline_hist(x, n_bins = 8)  n_empty(x)  min_char(x)  max_char(x)  n_unique(x)  ts_start(x)  ts_end(x)  inline_linegraph(x, length.out = 16)  list_lengths_min(x)  list_lengths_median(x)  list_lengths_max(x)  list_min_length(x)  list_max_length(x)"},{"path":"https://docs.ropensci.org/skimr/reference/stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistic functions — stats","text":"x vector max_char top = 3, max_levels = 4 max_levels maximum number levels displayed. n_bins inline_hist, number histogram bars. length.inline_linegraph, length character time series.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/stats.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summary statistic functions — stats","text":"n_missing(): Calculate sum NA NULL (.e. missing) values. n_complete(): Calculate sum NA NULL (.e. missing) values. complete_rate(): Calculate complete values; complete values missing. n_whitespace(): Calculate number rows containing whitespace values using s+ regex. sorted_count(): Create contingency table arrange levels descending order. case ties, ordering results alphabetical depends upon locale. NA treated ordinary value sorting. top_counts(): Compute collapse contingency table single character scalar. Wraps sorted_count(). inline_hist(): Generate inline histogram numeric variables. character length histogram controlled formatting options character vectors. n_empty(): Calculate number blank values character vector. \"blank\" equal \"\". min_char(): Calculate minimum number characters within character vector. max_char(): Calculate maximum number characters within character vector. n_unique(): Calculate number unique elements remove NA. ts_start(): Get start time series without frequency. ts_end(): Get finish time series without frequency. inline_linegraph(): Generate inline line graph time series variables. character length line graph controlled formatting options character vectors. Based function pillar package. list_lengths_min(): Get length shortest list vector lists. list_lengths_median(): Get median length lists. list_lengths_max(): Get maximum length lists. list_min_length(): Get length shortest list vector lists. list_max_length(): Get length longest list vector lists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/reference/summary.skim_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for skim_df — summary.skim_df","title":"Summary function for skim_df — summary.skim_df","text":"method generic function summary().","code":""},{"path":"https://docs.ropensci.org/skimr/reference/summary.skim_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for skim_df — summary.skim_df","text":"","code":"# S3 method for skim_df summary(object, ...)"},{"path":"https://docs.ropensci.org/skimr/reference/summary.skim_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for skim_df — summary.skim_df","text":"object skim dataframe. ... Additional arguments affecting summary produced. used.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/summary.skim_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for skim_df — summary.skim_df","text":"summary skim data frame.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/summary.skim_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for skim_df — summary.skim_df","text":"","code":"a <- skim(mtcars) summary(a) #> ── Data Summary ──────────────────────── #>                            Values #> Name                       mtcars #> Number of rows             32     #> Number of columns          11     #> _______________________           #> Column type frequency:            #>   numeric                  11     #> ________________________          #> Group variables            None"},{"path":"https://docs.ropensci.org/skimr/reference/to_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ","title":"Create ","text":"Skim results returned tidy long data frame four columns: variable, type, stat formatted.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/to_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ","text":"","code":"to_long(.data, ..., skim_fun = skim)  # S3 method for default to_long(.data, ..., skim_fun = skim)  # S3 method for skim_df to_long(.data, ..., skim_fun = skim)"},{"path":"https://docs.ropensci.org/skimr/reference/to_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ","text":".data data frame object can coerced data frame. ... Columns select skimming. none provided, default skim columns. skim_fun skim function used.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/to_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ","text":"tibble","code":""},{"path":"https://docs.ropensci.org/skimr/reference/to_long.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Create ","text":"to_long(default): Skim data frame convert results long data frame. to_long(skim_df): Transform skim_df long data frame.","code":""},{"path":"https://docs.ropensci.org/skimr/reference/to_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ","text":"","code":"to_long(iris) #> # A tibble: 45 × 4 #>    skim_type skim_variable stat          formatted #>    <chr>     <chr>         <chr>         <chr>     #>  1 factor    Species       n_missing     0         #>  2 numeric   Sepal.Length  n_missing     0         #>  3 numeric   Sepal.Width   n_missing     0         #>  4 numeric   Petal.Length  n_missing     0         #>  5 numeric   Petal.Width   n_missing     0         #>  6 factor    Species       complete_rate 1         #>  7 numeric   Sepal.Length  complete_rate 1         #>  8 numeric   Sepal.Width   complete_rate 1         #>  9 numeric   Petal.Length  complete_rate 1         #> 10 numeric   Petal.Width   complete_rate 1         #> # ℹ 35 more rows to_long(skim(iris)) #> # A tibble: 45 × 4 #>    skim_type skim_variable stat          formatted #>    <chr>     <chr>         <chr>         <chr>     #>  1 factor    Species       n_missing     0         #>  2 numeric   Sepal.Length  n_missing     0         #>  3 numeric   Sepal.Width   n_missing     0         #>  4 numeric   Petal.Length  n_missing     0         #>  5 numeric   Petal.Width   n_missing     0         #>  6 factor    Species       complete_rate 1         #>  7 numeric   Sepal.Length  complete_rate 1         #>  8 numeric   Sepal.Width   complete_rate 1         #>  9 numeric   Petal.Length  complete_rate 1         #> 10 numeric   Petal.Width   complete_rate 1         #> # ℹ 35 more rows"},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-215","dir":"Changelog","previous_headings":"","what":"skimr 2.1.5","title":"skimr 2.1.5","text":"CRAN release: 2022-12-23 Updated work newer version purrr","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-214","dir":"Changelog","previous_headings":"","what":"skimr 2.1.4","title":"skimr 2.1.4","text":"CRAN release: 2022-04-15","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-2-1-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 2.1.4","text":"skim() used within function now prints data frame name. columns selected focus() shown correct order edge cases relating empty skim types improved can control width rule line printed subtables option: skimr_table_header_width. default use console width, .e. value width option. improved performance handling large data many columns.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-2-1-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 2.1.4","text":"Replace Suppporting Additional Objects vignette Extending skimr. Remove sf Suggests. Default support haven_labelled columns now supported. columns summarized using skimmers underlying data, typically either numeric character.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-2-1-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 2.1.4","text":"skim_list (commonly generated partition() function) also inherits list","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-213","dir":"Changelog","previous_headings":"","what":"skimr 2.1.3","title":"skimr 2.1.3","text":"CRAN release: 2021-03-07","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-2-1-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 2.1.3","text":"Add support data tables dtplyr used. Improve tests.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-212","dir":"Changelog","previous_headings":"","what":"skimr 2.1.2","title":"skimr 2.1.2","text":"CRAN release: 2020-07-06","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-2-1-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 2.1.2","text":"Add support lubridate Timespan objects. Improvements Supporting Additional Objects vignette.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-2-1-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 2.1.2","text":"Update package work new version knitr.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-211-2020-04-15","dir":"Changelog","previous_headings":"","what":"skimr 2.1.1 (2020-04-15)","title":"skimr 2.1.1 (2020-04-15)","text":"CRAN release: 2020-04-16","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-2-1-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 2.1.1 (2020-04-15)","text":"Prepare release dplyr 1.0 related packages. 0-length sfls now permitted.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-2-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 2.1.0 (2020-01-10)","text":"’ve made to_long() generic, supporting intuitive interface. Called skim_df, reshapes output V1 long style. Called tibble-like objects, first skims produces long output. can pass custom skim function, like skim_tee() Thanks @sethlatimer suggesting feature.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 2.1.0 (2020-01-10)","text":"Update package work new version tibble. Adds flexibility rule width skimr::summarize(). README badges documentation crosslinks","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-201-2019-11-23","dir":"Changelog","previous_headings":"","what":"skimr 2.0.1 (2019-11-23)","title":"skimr 2.0.1 (2019-11-23)","text":"CRAN release: 2019-11-24","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 2.0.1 (2019-11-23)","text":"Address failed build CRAN due lack UTF-8 support platforms.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"welcome-to-skimr-v2-2-0-0","dir":"Changelog","previous_headings":"","what":"Welcome to skimr V2","title":"skimr 2.0.0 (2019-11-12)","text":"V2 complete rewrite skimr, incorporating great feedback developers received last year. big thank goes @GShotwell, @akraemer007, @puterleat, @tonyfischetti, @Nowosad, @rgayler, @jrosen48, @randomgambit, @elben10, @koliii, @AndreaPi, @rubenarslan, @GegznaV, @svraka, @dpprdan ROpenSci reviewers @jenniferthompson @jimhester great support feedback last year. couldn’t done without . users using skimr change terms visual outputs. However users use skimr outputs part larger workflow differences substantial.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"the-skim_df-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"The skim_df","title":"skimr 2.0.0 (2019-11-12)","text":"’ve changed way data represented within skimr closer match expectations. now wide default. makes piping statistics much simpler means old reshaping functions skim_to_wide() skim_to_list() deprecated. latter replaced reshaping function called partition() breaks skim_df list data type. Similarly, yank() gets specific data type skim_df. to_long() gets data closest format old API. example suggests, columns summary statistics prefixed skim_type. , statistics numeric columns begin numeric., factors begin factor., .","code":"skim(iris) %>%   dplyr::filter(numeric.sd > 1)"},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"rendering-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Rendering","title":"skimr 2.0.0 (2019-11-12)","text":"’ve deprecated support pander() kable() method. Instead, now support knitr knit_print() API. much seamless . skim_df final object code chunk produce nice results majority RMarkdown formats.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"customizing-and-extending-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Customizing and extending","title":"skimr 2.0.0 (2019-11-12)","text":"’ve deprecated previous approach customization. longer use skim_format() skim_with() longer depends global state. Instead skim_with() now function factory. Customization creates new skimming function. fundamental tool customization sfl object, skimmer function list. used within skim_with() also within new API adding default functions new data types, generic get_skimmers(). options set skim_format now either function arguments print arguments. former can updated using skim_with, latter call print(). RMarkdown documents, can change number displayed digits adding skimr_digits option code chunk.","code":"my_skim <- skim_with(numeric = sfl(mad = mad))"},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"other-new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"OTHER NEW FEATURES","title":"skimr 2.0.0 (2019-11-12)","text":"Substantial improvements summary(), now incorporated print() methods. focus() like dplyr::select(), keeps around columns skim_type skim_variable. also evaluating behavior different dplyr verbs make sure place nice skimr objects. skimr never really focused performance, better job big data sets lots different columns. New statistic character variables counting number rows completely made white space. now export skim_without_charts() fallback unicode support possible. default, skimr removes tibble metadata generating output. platforms, can lead output getting removed. disable behavior, set either strip_metadata = FALSE calling print use options(skimr_strip_metadata = FALSE).","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 2.0.0 (2019-11-12)","text":"Adjust code several tidyverse soft deprecations. Fix issue multibyte characters causing error.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-2-0-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 2.0.0 (2019-11-12)","text":"Change top_counts use useNA = “”.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-106-2019-05-27","dir":"Changelog","previous_headings":"","what":"skimr 1.0.6 (2019-05-27)","title":"skimr 1.0.6 (2019-05-27)","text":"CRAN release: 2019-05-27","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-1-0-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 1.0.6 (2019-05-27)","text":"Fix issue skim_tee() respecting … options. Fix issue NA character vectors returning NA max() min()","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-105-2019-01-05","dir":"Changelog","previous_headings":"","what":"skimr 1.0.5 (2019-01-05)","title":"skimr 1.0.5 (2019-01-05)","text":"CRAN release: 2019-02-25 likely last release skimr version 1. Version 2 major changes API. Users review prepare changes now.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-1-0-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 1.0.5 (2019-01-05)","text":"Fix issue multibyte characters causing error. Fix problem purrr find mean.default.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-104-2018-01-12","dir":"Changelog","previous_headings":"","what":"skimr 1.0.4 (2018-01-12)","title":"skimr 1.0.4 (2018-01-12)","text":"CRAN release: 2019-01-13 likely last release skimr version 1. Version 2 major changes API. Users review prepare changes now.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-1-0-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 1.0.4 (2018-01-12)","text":"Fix failures handling dplyr verbs related upcoming release dplyr 0.8.0.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-103-2018-06-06","dir":"Changelog","previous_headings":"","what":"skimr 1.0.3 (2018-06-06)","title":"skimr 1.0.3 (2018-06-06)","text":"CRAN release: 2018-06-07","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-1-0-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 1.0.3 (2018-06-06)","text":"can use skim_with() nest list functions: skim_with(.list =     mylist) skim_with(!!!mylist) polished display subtables default printing.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-1-0-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 1.0.3 (2018-06-06)","text":"Fix issue conflict knitr skimr versions kable() occurred intermittently. skim class skimmer list empty class. Fix mistake test skim_print top counts.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-102-2018-04-04","dir":"Changelog","previous_headings":"","what":"skimr 1.0.2 (2018-04-04)","title":"skimr 1.0.2 (2018-04-04)","text":"CRAN release: 2018-04-02","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-1-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 1.0.2 (2018-04-04)","text":"can create skimmers formula syntax rlang: skim_with(iqr = ~IQR(.x, na.rm = TRUE)).","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"major-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"skimr 1.0.2 (2018-04-04)","text":"median label changed p50 consistency previous changes p0 p100.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-1-0-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 1.0.2 (2018-04-04)","text":"Improvements corrections README documentation. New vignette showing defaults skimmers formats. Vector output match data frame output closely. Add minimum required version testhat. Add minimum required version knitr.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 1.0.2 (2018-04-04)","text":"can use skim_with() add remove skimmers time, .e. skim_with(iqr = IQR, hist = NULL) works expected. Histograms work Inf -Inf present. Change seq( ) parameter length.avoid problems name matching. Summary display data frame name “.” (occurs piping begins data frame).","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"skimr-101-2018-01-09","dir":"Changelog","previous_headings":"","what":"skimr 1.0.1 (2018-01-09)","title":"skimr 1.0.1 (2018-01-09)","text":"CRAN release: 2018-01-10","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-1-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 1.0.1 (2018-01-09)","text":"Add support spark plots Windows","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"major-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"skimr 1.0.1 (2018-01-09)","text":"spark_line() spark_bar() longer exported Default statistics numeric changed min(x) max(x) quantile(x, probs = 0) quantile(x, probs = 1). changes lead predictable behaviors column NA values.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-1-0-1","dir":"Changelog","previous_headings":"MAJOR CHANGES","what":"MINOR IMPROVEMENTS","title":"skimr 1.0.1 (2018-01-09)","text":"Add minimimum required version stringr Improve documentation general, especially related fonts","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 1.0.1 (2018-01-09)","text":"Fix issue histogram data NAs threw error Suppress progress bars dplyr::()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"major-changes-0-92","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"skimr 0.92 (2017-12-19)","text":"skim_v() longer exported. Vectors now directly supported via skim.default(). Change license GPL 3","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-0-92","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 0.92 (2017-12-19)","text":"Add support kable() pander() skim_df objects. Add summary method skim_df objects. Add support tidy select skim specific columns data frame. Add support skimming individual vectors via skim.default().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"new-features-0-91","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"skimr 0.91 (2017-10-14)","text":"Handling grouped data (generated dplyr::group_by()) Printing column classes Add indicator factor ordered skim object factor Introduction flexible formatting Easy dropping individual functions Vignettes basic use use specialized object types Updated README added CONTRIBUTING.md CONDUCT.md New public get_skimmers function access skim functions Support difftime class","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"minor-improvements-0-91","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"skimr 0.91 (2017-10-14)","text":"Add header print providing summary information data.","code":""},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-0-91","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 0.91 (2017-10-14)","text":"Change Colformat Pillar.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/skimr/news/index.html","id":"bug-fixes-0-900","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"skimr 0.900 (2017-07-16)","text":"Fix documentation get_fun_names() Fix test build errors notes","code":""}]
